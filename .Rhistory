roll_port <- compute_portfolio(train_data = test.dd, y_estim = pred_roll)
roll_port$eqw <- Return.portfolio(test_ret, geometric = T)
roll_port$btc <- Return.portfolio(test_ret$BTC, geometric = T)
roll_port$eth <- Return.portfolio(test_ret$ETH, geometric = T)
roll_port[1, ] <- 0
chart.CumReturns(roll_port, geometric = F,
legend.loc = 'topleft')
table.AnnualizedReturns(roll_port)
y_estim = pred_roll
train_data = test.dd
port <- y_estim
port$ETH <- log(train_data[, 'ETH'])
colnames(port) <- c('EETH', 'RETH')
port$residuals <- port$EETH - port$RETH
port <- na.omit(port)
# Constructing the weighted portfolios
cc <- port |>
data.frame() |>
select(residuals) |>
mutate(BTC = ifelse(residuals < 0, 0, 1),
ETH = 1 - BTC) |>
select(!c('residuals')) |>
na.omit() |>
as.xts()
View(cc)
colSums(cc)
data <- train_data |>
CalculateReturns() |>
na.omit()
pp <- Return.portfolio(R = data,
weights = cc,
geometric = T)
table.AnnualizedReturns(pp, geometric = T)
table.AnnualizedReturns(pp, geometric = F)
compute_portfolio <- function(train_data, y_estim)
{
port <- y_estim
port$ETH <- log(train_data[, 'ETH'])
colnames(port) <- c('EETH', 'RETH')
port$residuals <- port$EETH - port$RETH
port <- na.omit(port)
# Constructing the weighted portfolios
cc <- port |>
data.frame() |>
select(residuals) |>
mutate(BTC = ifelse(residuals < 0, 0, 1),
ETH = 1 - BTC) |>
select(!c('residuals')) |>
na.omit() |>
as.xts()
data <- train_data |>
CalculateReturns() |>
na.omit()
pp <- Return.portfolio(R = data,
weights = cc,
geometric = T)
return(pp)
}
chart.CumReturns(roll_port, geometric = T,
legend.loc = 'topleft')
chart.CumReturns(roll_port, geometric = F,
legend.loc = 'topleft')
table.AnnualizedReturns(roll_port, geometric = T)
table.AnnualizedReturns(roll_port, geometric = F)
head(dd)
# Expanding regression
# fit a rolling regression model first to guide in setting NAs
roll_res <- rollapply(
dd,
width = 67,
by = 67,
FUN = function(z)
coef(lm(formula = log(ETH) ~ log(BTC) - 1,
data = as.data.frame(z))),
by.column = FALSE,
align = "right"
)
roll_res
null_val <- which(is.na(roll_res$X.Intercept.))
head(roll_res)
null_val <- which(is.na(roll_res[,1]))
null_val
(is.na(roll_res[,1]))
null_val <- which(is.na(roll_res[,1]))
idx <- index(roll_res)[null_val]
idx
xcol
# expanding window regression
rr <- roll_lm(x = log(dd[, 'BTC']),
y = log(dd[, 'ETH']),
intercept = F,
width = nrow(dd),
online = F,
min_obs = 67)
View(rr)
exp_res <- (rr$coefficients)
iew(exp_res)
View(exp_res)
plot(exp_res)
exp_res[ymd(idx), ] <- NA
exp_res <- exp_res |>
na.locf() |>
na.locf(fromLast = T)
model.dd <- xts(
tibble(xcol = log(data[, xcol])),
order.by = index(exp_res)
)
model.dd <- xts(
tibble(xcol = log(dd[, 'BTC'])),
order.by = index(exp_res)
)
# expanding window regression
rr <- roll_lm(x = log(dd[, 'BTC']),
y = log(dd[, 'ETH']),
intercept = F,
width = nrow(dd),
online = F,
min_obs = 2)
exp_res <- (rr$coefficients)
plot(exp_res)
exp_res[ymd(idx), ] <- NA
exp_res <- exp_res |>
na.locf() |>
na.locf(fromLast = T)
model.dd <- xts(
tibble(xcol = log(dd[, 'BTC'])),
order.by = index(exp_res)
)
roll_res
exp_res
model.dd
# POrtfolio object
pred_roll <- Return.portfolio(R = model.dd,
weights = exp_res,
geometric = F)
pred_roll
dim(exp_res)
dim(test.dd)
exp_res <- exp_res[test_index]
model.dd <- xts(
tibble(xcol = log(test.dd[, 'BTC'])),
order.by = index(exp_res)
)
# POrtfolio object
pred_roll <- Return.portfolio(R = model.dd,
weights = exp_res,
geometric = F)
dim(pred_roll)
roll_port <- compute_portfolio(train_data = test.dd, y_estim = pred_roll)
roll_port
table.AnnualizedReturns(roll_port)
m1 <- rollapply(
dd,
width = 250,
by = 170,
FUN = function(z)
coef(lm(
formula = log(ETH) ~ log(BTC),
data = as.data.frame(z)
)),
by.column = FALSE,
align = "right"
)
roll_res <- m1 |>
na.locf() |>
na.locf(fromLast = T)
roll_res <- roll_res[test_index]
# data
model.dd <- xts(tibble(
`(Intercept)` = rep(1, nrow(roll_res)),
xcol = log(test.dd[, 'BTC'])
),
order.by = index(roll_res))
pred_roll <- Return.portfolio(R = model.dd,
weights = roll_res,
geometric = F)
roll_port <- compute_portfolio(train_data = test.dd, y_estim = pred_roll)
# POrtfolio object
pred_exp <- Return.portfolio(R = model.dd,
weights = exp_res,
geometric = F)
roll_res <- rollapply(
dd,
width = 67,
by = 67,
FUN = function(z)
coef(lm(formula = log(ETH) ~ log(BTC) - 1,
data = as.data.frame(z))),
by.column = FALSE,
align = "right"
)
null_val <- which(is.na(roll_res[,1]))
idx <- index(roll_res)[null_val]
# expanding window regression
rr <- roll_lm(x = log(dd[, 'BTC']),
y = log(dd[, 'ETH']),
intercept = F,
width = nrow(dd),
online = F,
min_obs = 2)
exp_res <- (rr$coefficients)
plot(exp_res)
exp_res[ymd(idx), ] <- NA
exp_res <- exp_res |>
na.locf() |>
na.locf(fromLast = T)
exp_res <- exp_res[test_index]
model.dd <- xts(
tibble(xcol = log(test.dd[, 'BTC'])),
order.by = index(exp_res)
)
# POrtfolio object
pred_exp <- Return.portfolio(R = model.dd,
weights = exp_res,
geometric = F)
roll_port$exp_port <- compute_portfolio(train_data = test.dd, y_estim = pred_exp)
roll_port$eqw <- Return.portfolio(test_ret, geometric = T)
roll_port$btc <- Return.portfolio(test_ret$BTC, geometric = T)
roll_port$eth <- Return.portfolio(test_ret$ETH, geometric = T)
roll_port[1, ] <- 0
chart.CumReturns(roll_port, geometric = F,
legend.loc = 'topleft')
table.AnnualizedReturns(roll_port, geometric = F)
table.AnnualizedReturns(roll_port, geometric = T)
chart.CumReturns(roll_port, geometric = F,
legend.loc = 'topleft', plot.engine = 'plotly')
colnames(roll_port)
colnames(roll_port) <- c('Rolling portfolio', 'Expanding portfolio', 'EQW', 'BTC','ETH')
chart.CumReturns(roll_port, geometric = F,
legend.loc = 'topleft', plot.engine = 'plotly')
table.AnnualizedReturns(roll_port, geometric = T)
setwd("/home/nc-workforce/Documents/Kaggle/Spaceship competition")
library(pacman)
p_load(dplyr, ggplot2, lubridate, stringr, caret, pROC, recipes, ModelMetrics,
gridExtra, naniar, glmnet, corrplot, e1071, recipes, ggmosaic)
train <- read.csv('Data/train.csv')
test <- read.csv('Data/test.csv')
# Feature construction ----------------------------------------------------
# splitting passenger ID
odd_id <- seq(from = 1, to = nrow(train)*2, by = 2)
id_loc <- function(vec, id) vec[id] # function for vector location '[.]'
train <- train |>
mutate(Cabin = ifelse(test = Cabin == '', yes = '//', no = Cabin)) |>
mutate(Group = (str_split(PassengerId, '_') |> unlist())[odd_id],
PID = (str_split(PassengerId, '_') |> unlist())[-odd_id],
CabinDeck = lapply((str_split(Cabin, '/')), id_loc, 1) |> unlist(),
CabinNum = lapply((str_split(Cabin, '/')), id_loc, 2) |> unlist(),
CabinSide = lapply((str_split(Cabin, '/')), id_loc, 3) |> unlist()) |>
select(PID, Group, HomePlanet, CryoSleep, CabinDeck, CabinNum, CabinSide,
Destination, Age, VIP, RoomService,
FoodCourt, ShoppingMall, Spa, VRDeck, Transported)
# mean-value imputation based on Analysis of Variance:
# i select the top two explanatory variables
# imputting VRDeck
aov(VRDeck ~ . - Group - CabinNum - Transported, data = na.omit(train)) |>
stats::step(direction = 'backward') |>
summary()
newVR <- train |>
aggregate(VRDeck ~ HomePlanet + CryoSleep, mean, na.omit = T) |>
setNames(c('HomePlanet', 'CryoSleep', 'newVR'))
# imputing room service
aov(RoomService ~ . - Group - CabinNum - Transported, data = na.omit(train)) |>
stats::step(direction = 'backward') |>
summary()
newRoomService <- train |>
aggregate(RoomService ~ HomePlanet + CryoSleep, mean, na.omit = T) |>
setNames(c('HomePlanet', 'CryoSleep', 'newRoomService'))
# imputting food court
aov(FoodCourt ~ . - Group - CabinNum - Transported, data = na.omit(train)) |>
stats::step(direction = 'backward') |>
summary()
newFoodCourt <- train |>
aggregate(FoodCourt ~ HomePlanet + CryoSleep, mean, na.omit = T) |>
setNames(c('HomePlanet', 'CryoSleep', 'newFoodCourt'))
# imputting shopping mall
aov(ShoppingMall ~ . - Group - CabinNum - Transported, data = na.omit(train)) |>
stats::step(direction = 'backward') |>
summary()
newShoppingMall <- train |>
aggregate(ShoppingMall ~ HomePlanet + CryoSleep, mean, na.omit = T) |>
setNames(c('HomePlanet', 'CryoSleep', 'newShoppingMall'))
# imputting spa
aov(Spa ~ . - Group - CabinNum - Transported, data = na.omit(train)) |>
stats::step(direction = 'backward') |>
summary()
newSpa <- train |>
aggregate(Spa ~ HomePlanet + CryoSleep, mean, na.omit = T) |>
setNames(c('HomePlanet', 'CryoSleep', 'newSpa'))
# Age estimatred using deck and cabin side
aov(Age ~ . - Group - CabinNum - Transported, data = na.omit(train)) |>
stats::step(direction = 'backward') |>
summary()
newAge <- train |>
aggregate(Age ~ PID + HomePlanet, mean, na.omit = T) |>
setNames(c('PID', 'HomePlanet', 'newAge'))
train <- train |>
merge(newVR,
by = c('HomePlanet', 'CryoSleep'),
all.x = T) |>
merge(newRoomService,
by = c('HomePlanet', 'CryoSleep'),
all.x = T) |>
merge(newFoodCourt,
by = c('HomePlanet', 'CryoSleep'),
all.x = T) |>
merge(newShoppingMall,
by = c('HomePlanet', 'CryoSleep'),
all.x = T)|>
merge(newSpa,
by = c('HomePlanet', 'CryoSleep'),
all.x = T) |>
merge(newAge,
by = c('PID', 'HomePlanet'),
all.x = T)
train <- train |>
mutate(
RoomService = ifelse(is.na(RoomService), newRoomService, RoomService),
FoodCourt = ifelse(is.na(FoodCourt), newFoodCourt, FoodCourt),
ShoppingMall = ifelse(is.na(ShoppingMall), newShoppingMall, ShoppingMall),
Spa = ifelse(is.na(Spa), newSpa, Spa),
VRDeck = ifelse(is.na(VRDeck), newVR, VRDeck),
Age = ifelse(is.na(Age), newAge, Age)
) |>
select(c("PID", "VIP", "HomePlanet", "CryoSleep", "CabinDeck",
"CabinSide", "Destination", "Age", "RoomService",
"FoodCourt", "ShoppingMall", "Spa", "VRDeck", "Transported"))
# fill '' wih Unclassfied
rep_unclassified <- function(vec) ifelse(vec == '', 'Unclassified', vec)
train <- train |>
mutate(
across(
.cols = where(is.character),
.fns = rep_unclassified
)
) |>
mutate(
across(
.cols = where(is.character),
.fns = as.factor
)
# summary and structure
glimpse(train)
colnames(train)
# Replicating the feature engineering on test data
source('transform_test_function.R')
test <- transform_data(test)
ls()
rm(list = ls())
# dir ---------------------------------------------------------------------
setwd("/home/nc-workforce/Documents/Kaggle/Spaceship competition")
# libs --------------------------------------------------------------------
library(pacman)
p_load(dplyr, ggplot2, lubridate, stringr, caret, pROC, recipes, ModelMetrics,
gridExtra, naniar, glmnet, corrplot, e1071, recipes, ggmosaic)
# data --------------------------------------------------------------------
train <- read.csv('Data/train.csv')
test <- read.csv('Data/test.csv')
# Feature construction ----------------------------------------------------
# splitting passenger ID
odd_id <- seq(from = 1, to = nrow(train)*2, by = 2)
id_loc <- function(vec, id) vec[id] # function for vector location '[.]'
train <- train |>
mutate(Cabin = ifelse(test = Cabin == '', yes = '//', no = Cabin)) |>
mutate(Group = (str_split(PassengerId, '_') |> unlist())[odd_id],
PID = (str_split(PassengerId, '_') |> unlist())[-odd_id],
CabinDeck = lapply((str_split(Cabin, '/')), id_loc, 1) |> unlist(),
CabinNum = lapply((str_split(Cabin, '/')), id_loc, 2) |> unlist(),
CabinSide = lapply((str_split(Cabin, '/')), id_loc, 3) |> unlist()) |>
select(PID, Group, HomePlanet, CryoSleep, CabinDeck, CabinNum, CabinSide,
Destination, Age, VIP, RoomService,
FoodCourt, ShoppingMall, Spa, VRDeck, Transported)
# mean-value imputation based on Analysis of Variance:
# i select the top two explanatory variables
# imputting VRDeck
aov(VRDeck ~ . - Group - CabinNum - Transported, data = na.omit(train)) |>
stats::step(direction = 'backward') |>
summary()
newVR <- train |>
aggregate(VRDeck ~ HomePlanet + CryoSleep, mean, na.omit = T) |>
setNames(c('HomePlanet', 'CryoSleep', 'newVR'))
# imputing room service
aov(RoomService ~ . - Group - CabinNum - Transported, data = na.omit(train)) |>
stats::step(direction = 'backward') |>
summary()
newRoomService <- train |>
aggregate(RoomService ~ HomePlanet + CryoSleep, mean, na.omit = T) |>
setNames(c('HomePlanet', 'CryoSleep', 'newRoomService'))
# imputting food court
aov(FoodCourt ~ . - Group - CabinNum - Transported, data = na.omit(train)) |>
stats::step(direction = 'backward') |>
summary()
newFoodCourt <- train |>
aggregate(FoodCourt ~ HomePlanet + CryoSleep, mean, na.omit = T) |>
setNames(c('HomePlanet', 'CryoSleep', 'newFoodCourt'))
# imputting shopping mall
aov(ShoppingMall ~ . - Group - CabinNum - Transported, data = na.omit(train)) |>
stats::step(direction = 'backward') |>
summary()
newShoppingMall <- train |>
aggregate(ShoppingMall ~ HomePlanet + CryoSleep, mean, na.omit = T) |>
setNames(c('HomePlanet', 'CryoSleep', 'newShoppingMall'))
# imputting spa
aov(Spa ~ . - Group - CabinNum - Transported, data = na.omit(train)) |>
stats::step(direction = 'backward') |>
summary()
newSpa <- train |>
aggregate(Spa ~ HomePlanet + CryoSleep, mean, na.omit = T) |>
setNames(c('HomePlanet', 'CryoSleep', 'newSpa'))
# Age estimatred using deck and cabin side
aov(Age ~ . - Group - CabinNum - Transported, data = na.omit(train)) |>
stats::step(direction = 'backward') |>
summary()
newAge <- train |>
aggregate(Age ~ PID + HomePlanet, mean, na.omit = T) |>
setNames(c('PID', 'HomePlanet', 'newAge'))
train <- train |>
merge(newVR,
by = c('HomePlanet', 'CryoSleep'),
all.x = T) |>
merge(newRoomService,
by = c('HomePlanet', 'CryoSleep'),
all.x = T) |>
merge(newFoodCourt,
by = c('HomePlanet', 'CryoSleep'),
all.x = T) |>
merge(newShoppingMall,
by = c('HomePlanet', 'CryoSleep'),
all.x = T)|>
merge(newSpa,
by = c('HomePlanet', 'CryoSleep'),
all.x = T) |>
merge(newAge,
by = c('PID', 'HomePlanet'),
all.x = T)
train <- train |>
mutate(
RoomService = ifelse(is.na(RoomService), newRoomService, RoomService),
FoodCourt = ifelse(is.na(FoodCourt), newFoodCourt, FoodCourt),
ShoppingMall = ifelse(is.na(ShoppingMall), newShoppingMall, ShoppingMall),
Spa = ifelse(is.na(Spa), newSpa, Spa),
VRDeck = ifelse(is.na(VRDeck), newVR, VRDeck),
Age = ifelse(is.na(Age), newAge, Age)
) |>
select(c("PID", "VIP", "HomePlanet", "CryoSleep", "CabinDeck",
"CabinSide", "Destination", "Age", "RoomService",
"FoodCourt", "ShoppingMall", "Spa", "VRDeck", "Transported"))
# fill '' wih Unclassfied
rep_unclassified <- function(vec) ifelse(vec == '', 'Unclassified', vec)
train <- train |>
mutate(
across(
.cols = where(is.character),
.fns = rep_unclassified
)
) |>
mutate(
across(
.cols = where(is.character),
.fns = as.factor
)
# summary and structure
glimpse(train)
colnames(train)
# Replicating the feature engineering on test data
source('transform_test_function.R')
test <- transform_data(test)
ncol(train)
sqrt(14)
c_rnf <- caret::train(
Transported ~ .,
method = 'rf',
tuneGrid = expand.grid(mtry = 4:14)
)
expand.grid(mtry = 4:14)
c_rnf <- caret::train(
Transported ~ .,
method = 'rf',
data = train,
trControl = trainControl(method = 'cv'),
tuneGrid = expand.grid(mtry = 4:14)
)
c_rnf; plot(c_rnf)
c_rnf$finalModel
rnf_final <- c_rnf$finalModel
predict(rnf_final, test)
colnames(train)
colnames(test)
predict(rnf_final, test[, -1])
md_test <- model.matrix(Group ~ ., data = test)
colnames(md_test)
predict(rnf_final, md_test)
rnf_pred <- predict(rnf_final, md_test)
table(rnf_pred)
sub_s8.m1 <- data.frame(
PassengerId = str_c(test$Group, '_', test$PID),
Transported = rnf_pred
)
head(sub_s8.m1)
write.csv(sub_s.m1, 'Data/sub_s8.m1.csv', row.names = F)
write.csv(sub_s8.m1, 'Data/sub_s8.m1.csv', row.names = F)
varImp(rnf_final)
barplot(varImp(rnf_final)
)
barplot(varImp(rnf_final))
plot(varImp(rnf_final))
x = varImp(rnf_final)
x
as.vector(x)
t(x)
plot(t(varImp(rnf_final)))
barplot(t(varImp(rnf_final)))
?barplot
